<% content_for :head do %>
  <script>
    $(document).ready(function(){

      window.juggernaut = new Juggernaut({
        secure: false,
        host: "<%= Chamber::Application.config.juggernaut_host %>",
        port: <%= Chamber::Application.config.juggernaut_port %>
      })
      juggernaut.meta = {
        user_id: <%= current_user.id %>,
        room_id: <%= @room.id %>
      }

       var room = new Chamber.Models.Room(<%= raw @room.to_json %>);

       var view = new Chamber.Views.Rooms.ShowView({
         el:           "#room",
         model:        room
       });

       // Subscribe to messages in this room.
       juggernaut.subscribe("rooms:" + room.id + ":messages", function(data) {
         if(data.action == "create") {
           var message = new Chamber.Models.Message(data.message);
           room.messages.add(message)
         }
       });

       // Subscribe to participants in this room.
       juggernaut.subscribe("rooms:" + room.id + ":participants", function(data) {
         if(data.action == "create") {
           var participant = new Chamber.Models.Participant(data.participant);
           room.participants.add(participant)
         }
       });
       
       // Subscribe to the roster for this room.
       juggernaut.subscribe("rooms:" + room.id + ":roster", function(data) {

        // Fetch the userID from the roster
        var userID = data.roster.roster.user_id

         switch(data.action) {
           case "create":
             console.log("new participant online")
             
             // TODO Use backbone to manipulate the participant
             // so that it gets a flog "online" or something simular.
             // But since `room.participants` is not populated, that
             // does not work at the moment (without fetching)
             //var participant = room.participants.get(userID)
             //participant.set({online: true})
             //participant.save()
             
             // Temporarly hack
             if ($("span", "[data-user-id=" + userID +"] a").length < 1) {
               $("a", "[data-user-id=" + userID +"]").append(' <span class="label">online</span>')
              }

             break
           case "destroy":
             console.log("particpant leaves")

             // TODO Use backbone to manipulate the participant
             // so that it gets a flog "offline" or something simular.
             // But since `room.participants` is not populated, that
             // does not work at the moment (without fetching)
             //var participant = room.participants.get(userID)
             //participant.set({online: false})
             //participant.save()

             // Temporarly hack
             $("span", "[data-user-id=" + userID +"] a").remove()

             break
         }
       });

    });

  </script>
<% end %>

<div class="row-fluid" id="room">
  <div class="span3">
    <div class="well sidebar-nav">
      <ul class="nav nav-list" id="participants">
        <li class="nav-header">Members of chatroom</li>
        <% @room.users.each do |user| %>
        <li data-user-id="<%= user.id %>"><a href="#"><%= user.full_name %></a></li>
        <% end %>
      </ul>
    </div><!--/.well -->

    <%= form_tag({controller: "participants", action: "destroy", room_id: @room.id, id: current_user.id}, method: "delete") do %>
      <%= submit_tag("Leave", class: "btn", name: "leave") %>
    <% end %>

  </div><!--/span-->

  <div class="span9">
    <div>
      <h1><%= @room.name %> <small><%= link_to 'edit', edit_room_path(@room) %> <br /> <%= @room.topic %></small></h1>

      <div class="wrapper">
        <table class="table table-striped table-bordered" id="messages">
          <tbody>
            <% @room.messages.each do |message| %>
            <%= render message %>
            <% end %>
          </tbody>
        </table>
      </div>

      <section>
        <%= form_tag(messages_path, method: "post", id: "new_message", class: "form-inline") do %>
          <%= text_field_tag(:body, nil, class: 'span11') %>
          <%= hidden_field_tag(:room_id, @room.id) %>
          <%= submit_tag("Send", class: "btn") %>
        <% end %>
      </section>

    </div>
  </div><!--/span-->
</div><!--/row-->
